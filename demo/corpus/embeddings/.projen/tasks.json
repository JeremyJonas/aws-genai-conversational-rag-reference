{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "npx projen default",
          "cwd": "../../.."
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install and upgrade dependencies",
      "env": {
        "VIRTUAL_ENV": ""
      },
      "steps": [
        {
          "exec": "unset VIRTUAL_ENV"
        },
        {
          "exec": "poetry update"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "poetry build"
        },
        {
          "exec": "mkdir -p .docker-dist && rm -rf .docker-dist/*"
        },
        {
          "exec": "rsync -a --exclude=*__pycache__* corpus_embeddings .docker-dist/"
        },
        {
          "exec": "poetry export --without-hashes --format=requirements.txt > .docker-dist/requirements.original.txt"
        },
        {
          "exec": "sed -n '/file:\\/\\//!p' .docker-dist/requirements.original.txt > .docker-dist/requirements.txt"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish": {
      "name": "publish",
      "description": "Uploads the package to PyPI.",
      "steps": [
        {
          "exec": "poetry publish"
        }
      ]
    },
    "publish:test": {
      "name": "publish:test",
      "description": "Uploads the package against a test PyPI endpoint.",
      "steps": [
        {
          "exec": "poetry publish -r testpypi"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "poetry run pytest"
        }
      ]
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(poetry env info -p)",
    "PATH": "$(echo $(poetry env info -p)/bin:$PATH)"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
